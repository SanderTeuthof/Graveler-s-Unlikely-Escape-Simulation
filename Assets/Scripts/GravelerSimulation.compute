// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<int> outputBuffer;

int ppInitial;
int randSeed;

[numthreads(1024, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x; // Get the index of the current thread
    int randState = randSeed + index; // Initialize random state for this thread
    int ppRemaining = ppInitial;
    int currentTurn = 0;

    // Run the simulation
    while (ppRemaining > 0)
    {
        currentTurn++;
        
        // Simple Linear Congruential Generator (LCG) for random number generation
        randState = randState * 1103515245 + 12345;
        int randomValue = (randState >> 16) & 0x7FFF;

        // Simulate paralysis chance (25%)
        if (randomValue % 4 == 0)
        {
            continue; // Skip decrementing PP if paralyzed
        }

        ppRemaining--;
    }

    // Store the number of turns survived in the output buffer
    outputBuffer[index] = currentTurn;
}
